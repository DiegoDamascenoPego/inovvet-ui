import { Injector, OnChanges, SimpleChanges, Input, EventEmitter, Output, ElementRef, ViewChild, AfterViewInit, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { AbstractModel } from 'app/model/abstract-model';
import { Abstract } from 'app/service/abstract.service';
import { MensagemService } from 'app/util/mensagem.service';
import { NgxSpinnerService } from 'ngx-spinner';

export abstract class FormBase<T extends AbstractModel> implements OnInit, OnChanges, AfterViewInit {
    
    @Input() entitySelecionado: T;
    @Output() closeCadastro = new EventEmitter;
    @ViewChild('setaFoco') setaFoco: ElementRef;

    protected spinner: NgxSpinnerService;
    protected route: ActivatedRoute;
    protected router: Router;
    protected fb: FormBuilder;
    protected msg: MensagemService;
    public entity: T;
    form: FormGroup;
    
    constructor(
        protected service: Abstract<T>,
        protected injector: Injector,
    ) {
        this.route = this.injector.get(ActivatedRoute);
        this.router = this.injector.get(Router);
        this.fb = this.injector.get(FormBuilder);
        this.msg = this.injector.get(MensagemService);
        this.spinner = this.injector.get(NgxSpinnerService);
        this.setForm();
    }

    abstract setForm();
    abstract setFormToEntity();
    abstract setEntity(response);

    ngOnInit(): void {
         if(this.route.snapshot.params['id']){
             this.onCarregar(this.route.snapshot.params['id'])
         }
    }

    ngOnChanges(changes: SimpleChanges): void {
        if (changes.entitySelecionado && changes.entitySelecionado.currentValue) {
            this.onCarregar(changes.entitySelecionado.currentValue.id);
        }
    }

    ngAfterViewInit(): void {
        if (this.entity && this.entity.id === 0 && this.entitySelecionado.id === 0) {
            setTimeout(() => this.setaFoco.nativeElement.focus());
        }
    }

    onSalvar() {
        this.spinner.show();
        this.setFormToEntity();
        this.service.salvar(this.entity).subscribe(
            (response) => {
                this.setEntity(response);
                this.msg.onSucess('Sucesso', 'Registro salvo.');
            },
            (response) => {
                this.msg.onError(response.error.titulo, response.error.descricao);
            }
        );
    }

    onCarregar(id) {
        if (id > 0) {
            this.spinner.show();
            this.service.buscarPorId(id).subscribe((response) => {
                this.setEntity(response);
            },
                (response) => {
                    this.msg.onError(response.error.titulo, response.error.detalhe);
                });

        }
    }

    onVoltar() {
        this.closeCadastro.emit();
    }

}
